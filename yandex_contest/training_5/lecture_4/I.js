// I. Лапта

// Ограничение времени 3 секунды
// Ограничение памяти 256Mb
// Ввод стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// При игре в лапту одна команда ловит мяч и пытается осалить им бегущего.
// Игрок другой команды должен, перед тем как бежать, ударить мяч в поле.
// Известно, на какое максимальное расстояние он может ударить,
// а также скорости и начальные координаты игроков другой команды.
// Требуется выбрать направление и силу удара так, чтобы минимальное время,
// которое потребуется другой команде, чтобы поднять мяч с земли, было наибольшим.
// (Пока мяч летит, игроки стоят на местах).

// Формат ввода
// В первой строке записаны два числа:
// D — максимальное расстояние удара и N — количество соперников на поле
// (D и N натуральные числа, D ≤ 1000, N ≤ 200).
// В следующих N строках записаны по три числа – начальные координаты xi и yi и максимальная скорость
// vi соответствующего игрока
// (скорости и координаты — целые числа, –1000 ≤ xi ≤ 1000, 0 ≤ yi ≤ 1000, 0 < vi ≤ 1000),
// никакие два игрока не находятся изначально в одной точке. Игрок, бьющий мяч,
// находится в точке с координатами (0, 0). Мяч выбивается в точку с неотрицательной ординатой (y ≥ 0).

// Формат вывода
// В выходной файл выведите сначала время, которое потребуется игрокам, чтобы добежать до мяча,
// а затем координаты точки, в которую нужно выбить мяч.
// Если таких точек несколько, выведите координаты любой из них.
// Время и координаты нужно вывести с точностью 10**–3.

// Пример
// Ввод
// 10 2
// 1 1 1
// -1 1 1

// Вывод
// 9.05539
// 0.00000 10.00000

const checkTime = (x, y, playersArr) => {
  return Math.min(...playersArr.map(([px, py, v]) => Math.sqrt((px - x) ** 2 + (py - y) ** 2) / v));
};

const findMaxTime = (D, playersArr) => {
  const K = 100;
  let maxTime = -1;
  let maxPoint = null;

  for (let i = 0; i <= K; i++) {
    for (let j = 0; j <= K; j++) {
      const x = -D + 2 * D * i / K;
      const y = D * j / K;

      if (x ** 2 + y ** 2 <= D ** 2) {
        const time = checkTime(x, y, playersArr);

        if (time > maxTime) {
          maxTime = time;
          maxPoint = [x, y];
        }
      }
    }
  }

  return [maxTime, ...maxPoint];
};

const fs = require('fs');
const [[D, N], ...players] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(
  line => line.split(' ').map(Number)
);
const [time, x, y] = findMaxTime(D, players);

console.log(`${time.toFixed(5)}\n${x.toFixed(5)} ${y.toFixed(5)}`);