// C. Саруман

// Ограничение времени 2 секунды
// Ограничение памяти 256Mb
// Ввод стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Как известно, Саруман Радужный очень любит порядок.
// Поэтому все полки его войска стоят друг за другом,
// причем каждый следующий полк содержит количество орков не меньше, чем предыдущий.

// Перед тем как напасть на Хельмову Падь, Саруман решил провести несколько вылазок для разведки.
// Чтобы его отряды никто не заметил, он решил каждый раз отправлять несколько подряд идущих полков так,
// чтобы суммарное количество орков в них было равно определенному числу.
// Так как это всего лишь разведка, каждый полк после вылазки возвращается на свое место.
// Задачу выбрать нужные полки он поручил Гриме Змеиному Языку.
// А Грима не поскупится на вознаграждение, если вы ему поможете.

// Формат ввода
// В первой строке входного файла находится два целых числа: n (1 ≤ n ≤ 2⋅10**5) —
// количество полков и m (1 ≤ m ≤ 2⋅10**5) – количество предстоящих вылазок.

// В следующей строке записано n чисел ai, где ai — число орков в i-ом полке (1 ≤ ai ≤ 10**9, ai ≤ ai+1).

// Далее в m строках записаны запросы вида: количество полков l (1 ≤ l ≤ n),
// которые должны будут отправиться в эту вылазку,
// и суммарное количество орков в этих полках s (1 ≤ s ≤ 2⋅10**16)

// Формат вывода
// Для каждого запроса выведите номер полка, с которого начнутся те l,
// которые необходимо отправить на вылазку. Если таких полков несколько, выведите любой.
// Если же так выбрать полки нельзя, выведите -1.

// Пример
// Ввод         Вывод
// 5 2          1
// 1 3 5 7 9    2
// 2 4
// 1 3

const floorDiv = (a, b) => (a - a % b) / b;

const getPrefSum = (regimentsArr, N) => {
  const prefSum = Array(Number(N) + 1).fill(0n);

  for (let i = 0; i < Number(N); i++) {
    prefSum[i + 1] = prefSum[i] + regimentsArr[i];
  }

  return prefSum;
};

const findPos = (N, M, regimentsArr, foraysArr) => {
  const prefSum = getPrefSum(regimentsArr, N);
  const res = [];

  for (let i = 0; i < Number(M); i++) {
    const [l, s] = foraysArr[i];

    let left = 0n;
    let right = N - l + 1n;

    while (left < right - 1n) {
      const m = BigInt(floorDiv(left + right, 2n));

      if (BigInt(prefSum[Number(m) + Number(l)]) - BigInt(prefSum[Number(m)]) > s) {
        right = m;
      } else {
        left = m;
      }
    }

    res.push(BigInt(prefSum[Number(left) + Number(l)]) - BigInt(prefSum[Number(left)]) === s
      ? Number(left) + 1 : -1
    );
  }

  return res.join('\n');
};

const fs = require('fs');
const [[n, m], [...regiments], ...forays] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(
  e => e.split(' ').map(BigInt)
);

console.log(findPos(n, m, regiments, forays));