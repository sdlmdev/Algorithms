// A. Плейлисты

// Ограничение времени 1.5 секунд
// Ограничение памяти 256Mb
// Ввод стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Костя успешно прошел собеседование и попал на стажировку в отдел разработки сервиса «Музыка».

// Конкретно ему поручили такое задание — научиться подбирать плейлист для группы друзей,
// родственников или коллег. При этом нужно подобрать такой плейлист,
// в который входят исключительно нравящиеся всем членам группы песни.

// Костя очень хотел выполнить это задание быстро и качественно, но у него не получается.
// Помогите ему написать программу, которая составляет плейлист для группы людей.

// Формат ввода
// В первой строке расположено одно натуральное число n(1≤n≤2⋅10**5), где n – количество человек в группе.
// В следующих 2⋅n строках идет описание любимых плейлистов членов группы. По 2 строки на каждого участника.
// В первой из этих 2-х строк расположено число ki — количество любимых треков i-го члена группы.
// В следующей строке расположено ki строк через пробел — названия любимых треков i-го участника группы.

// Каждый трек в плейлисте задан в виде строки, все строки уникальны,
// сумма длин строк не превосходит 2⋅10**6. Строки содержат большие и маленькие латинские буквы и цифры.

// Формат вывода
// Выведите количество, а затем сам список песен через пробел — список треков,
// которые нравятся каждому участнику группы. Ответ необходимо отсортировать в лексикографическом порядке!

// Пример 1
// Ввод             Вывод
// 1                2
// 2                GoGetIt Life
// GoGetIt Life

// Пример 2
// Ввод             Вывод
// 2                1
// 2                Life
// Love Life
// 2
// Life GoodDay

const findCommonSongs = (N, songs) => {
  const songsMap = new Map();
  const res = [];

  songs.forEach(song => {
    if (songsMap.has(song)) {
      songsMap.set(song, songsMap.get(song) + 1);
    } else {
      songsMap.set(song, 1);
    }
  });

  for (const [key, value] of songsMap) {
    if (value === N) {
      res.push(key);
    }
  }

  return [res.length, res.sort().join(' ')].join('\n');
};

const fs = require('fs');
let [n, ...lines] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(
  line => line.split(' ')
);
lines = lines.filter((el, i) => i % 2 !== 0).flat();
n = +n;

console.log(findCommonSongs(n, lines));