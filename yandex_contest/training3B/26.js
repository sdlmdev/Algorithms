// 26. Самый дешевый путь

// Ограничение времени 1 секунда
// Ограничение памяти	256Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// В каждой клетке прямоугольной таблицы N × M записано некоторое число.
// Изначально игрок находится в левой верхней клетке.
// За один ход ему разрешается перемещаться в соседнюю клетку либо вправо,
// либо вниз (влево и вверх перемещаться запрещено).
// При проходе через клетку с игрока берут столько килограммов еды,
// какое число записано в этой клетке (еду берут также за первую и последнюю клетки его пути).

// Требуется найти минимальный вес еды в килограммах, отдав которую игрок может попасть в правый нижний угол.

// Формат ввода
// Вводятся два числа N и M — размеры таблицы (1 ≤ N ≤ 20, 1 ≤ M ≤ 20).
// Затем идет N строк по M чисел в каждой —
// размеры штрафов в килограммах за прохождение через соответствующие клетки (числа от 0 до 100).

// Формат вывода
// Выведите минимальный вес еды в килограммах, отдав которую можно попасть в правый нижний угол.

// Пример
// Ввод	                   Вывод
// 5 5                     11
// 1 1 1 1 1
// 3 100 100 100 100
// 1 1 1 1 1
// 2 2 2 2 1
// 1 1 1 1 1

const findMinPath = (N, M, table) => {
  const dp = Array.from({ length: N}, () => Array(M).fill(Infinity));
  dp[0][0] = table[0][0];

  for (let i = 1; i < N; i++) {
    dp[i][0] = dp[i - 1][0] + table[i][0];
  }

  for (let j = 1; j < M; j++) {
    dp[0][j] = dp[0][j - 1] + table[0][j];
  }

  for (let i = 1; i < N; i += 1) {
    for (let j = 1; j < M; j += 1) {
      dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + table[i][j];
    }
  }

  return dp[N - 1][M - 1];
};

const fs = require('fs');
const [[n, m], ...lines] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(
  line => line.trim().split(' ').map(Number)
);

console.log(findMinPath(n, m, lines));