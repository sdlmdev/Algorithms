// C. Рассадка в аудитории

// Ограничение времени 1 секунда
// Ограничение памяти 64Mb
// Ввод стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Экзамен по берляндскому языку проходит в узкой и длинной аудитории.
// На экзамен пришло N студентов. Все они посажены в ряд. Таким образом,
// позиция каждого человека задается координатой на оси Ox (эта ось ведет вдоль длинной аудитории).
// Два человека могут разговаривать, если расстояние между ними меньше или равно D.
// Какое наименьшее количество типов билетов должен подготовить преподаватель,
// чтобы никакие два студента с одинаковыми билетами не могли разговаривать?
// Выведите способ раздачи преподавателем билетов.

// Формат ввода

// В первой строке входного файла содержится два целых числа N, D (1 ≤ N ≤ 10000; 0 ≤ D ≤ 106).
// Вторая строка содержит последовательность различных целых чисел X1, X2, ..., XN,
// где Xi (0 ≤ Xi ≤ 106) обозначает координату вдоль оси Ox i-го студента

// Формат вывода

// В первую строчку выходного файла выведите количество вариантов, а во вторую, разделяя пробелами,
// номера вариантов студентов в том порядке, в каком они перечислены во входном файле.

// Пример 1
// Ввод          Вывод
// 4 1           2
// 11 1 12 2     1 1 2 2

// Пример 2
// Ввод          Вывод
// 4 0           1
// 11 1 12 2     1 1 1 1

const checkStudents = (N, D, pointsArr) => {
  const students = Array(N * 2);
  const tickets = [N];

  while (tickets.length < N) {
    tickets.push(tickets[tickets.length - 1] - 1);
  }

  for (let i = 0, j = students.length - 1; i < N; i++, j--) {
    students[i] = [pointsArr[i], -1, i];
    students[j] = [pointsArr[i] + D, 1, i];
  }

  students.sort((a, b) => a[0] - b[0] || a[1] - b[1]);

  const res = Array(N);
  let cnt = 0;
  let maxCnt = 0;

  for (let i = 0; i < students.length; i++) {
    if (students[i][1] === -1) {
      cnt++;
      res[students[i][2]] = tickets.pop();
    } else {
      cnt--;
      tickets.push(res[students[i][2]]);
    }

    maxCnt = Math.max(maxCnt, cnt);
  }

  return [maxCnt, res.join(' ')].join('\n');
};

const fs = require('fs');
const [[n, d], points] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(
  el => el.split(' ').map(Number)
);

fs.writeFileSync('output.txt', checkStudents(n, d, points));