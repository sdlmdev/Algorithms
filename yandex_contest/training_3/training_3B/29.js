// 29. Кафе

// Ограничение времени 1 секунда
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Около Петиного университета недавно открылось новое кафе,
// в котором действует следующая система скидок:
// при каждой покупке более чем на 100 рублей покупатель получает купон,
// дающий право на один бесплатный обед
// (при покупке на сумму 100 рублей и меньше такой купон покупатель не получает).

// Однажды Пете на глаза попался прейскурант на ближайшие N дней.
// Внимательно его изучив, он решил, что будет обедать в этом кафе все N дней,
// причем каждый день он будет покупать в кафе ровно один обед. Однако стипендия у Пети небольшая,
// и поэтому он хочет по максимуму использовать предоставляемую систему скидок так,
// чтобы его суммарные затраты были минимальны.
// Требуется найти минимально возможную суммарную стоимость обедов и номера дней,
// в которые Пете следует воспользоваться купонами.

// Формат ввода
// В первой строке входного файла записано целое число N (0 ≤ N ≤ 100).
// В каждой из последующих N строк записано одно целое число,
// обозначающее стоимость обеда в рублях на соответствующий день.
// Стоимость — неотрицательное целое число, не превосходящее 300.

// Формат вывода
// В первой строке выдайте минимальную возможную суммарную стоимость обедов.
// Во второй строке выдайте два числа K1 и K2 — количество купонов,
// которые останутся неиспользованными у Пети после этих N дней и количество использованных им купонов соответственно.

// В последующих K2 строках выдайте в возрастающем порядке номера дней,
// когда Пете следует воспользоваться купонами.
// Если существует несколько решений с минимальной суммарной стоимостью,
// то выдайте то из них, в котором значение K1 максимально
// (на случай, если Петя когда-нибудь ещё решит заглянуть в это кафе).
// Если таких решений несколько, выведите любое из них.

// Пример
// Ввод    	Вывод
// 5        235
// 35       0 1
// 40       5
// 101
// 59
// 63

const findMinPrice = (N, pricesArr) => {
  const dp = Array.from({ length: N + 1 }, () => Array(N + 2).fill(Infinity));
  dp[0][0] = 0;

  for (let i = 1; i <= N; i += 1) {
    for (let j = 0; j <= N; j += 1) {
      if (pricesArr[i - 1] > 100) {
        dp[i][j] = Math.min(
          dp[i - 1][j - 1] !== undefined ? dp[i - 1][j - 1] + pricesArr[i - 1] : Infinity,
          dp[i - 1][j + 1] !== undefined ? dp[i - 1][j + 1] : Infinity
        );
      } else {
        dp[i][j] = Math.min(
          dp[i - 1][j] !== undefined ? dp[i - 1][j] + pricesArr[i - 1] : Infinity,
          dp[i - 1][j + 1] !== undefined ? dp[i - 1][j + 1] : Infinity
        );
      }
    }
  }

  const dpLength = dp.length - 1;
  const minPrice = Math.min(...dp[dpLength]);
  let k1 = dp[dpLength].lastIndexOf(minPrice);
  let k2 = 0;
  let i = dpLength;
  let j = k1;
  const res = [];

  while (i > 1) {
    const coupon = j < n ? dp[i - 1][j + 1] : Infinity;

    if (dp[i][j] === coupon) {
      res.push(i);
      i -= 1;
      j += 1;
      k2 += 1;
    } else if (pricesArr[i - 1] > 100) {
      i -= 1;
      j -= 1;
    } else {
      i -= 1;
    }
  }

  return [minPrice, [k1, k2].join(' '), ...res.reverse()].join('\n');
};

const fs = require('fs');
const [n, ...prices] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(Number);

console.log(findMinPrice(n, prices));