// 11. Стек с защитой от ошибок

// Ограничение времени 1 секунда
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Научитесь пользоваться стандартной структурой данных stack для целых чисел.
// Напишите программу, содержащую описание стека и моделирующую работу стека,
// реализовав все указанные здесь методы.
// Программа считывает последовательность команд и в зависимости от команды выполняет ту или иную операцию.
// После выполнения каждой команды программа должна вывести одну строчку. Возможные команды для программы:

// push n
// Добавить в стек число n (значение n задается после команды). Программа должна вывести ok.

// pop
// Удалить из стека последний элемент. Программа должна вывести его значение.

// back
// Программа должна вывести значение последнего элемента, не удаляя его из стека.

// size
// Программа должна вывести количество элементов в стеке.

// clear
// Программа должна очистить стек и вывести ok.

// exit
// Программа должна вывести bye и завершить работу.

// Перед исполнением операций back и pop программа должна проверять,
// содержится ли в стеке хотя бы один элемент.
// Если во входных данных встречается операция back или pop, и при этом стек пуст,
// то программа должна вместо числового значения вывести строку error.

// Формат ввода
// Вводятся команды управления стеком, по одной на строке

// Формат вывода
// Программа должна вывести протокол работы стека, по одному сообщению на строке

// Пример 1
// Ввод	        Вывод
// push 1       ok
// back         1
// exit         bye

// Пример 2
// Ввод	        Вывод
// size         0
// push 1       ok
// size         1
// push 2       ok
// size         2
// push 3       ok
// size         3
// exit         bye

// Пример 3
// Ввод	        Вывод
// push 3       ok
// push 14      ok
// size         2
// clear        ok
// push 1       ok
// back         1
// push 2       ok
// back         2
// pop          2
// size         1
// pop          1
// size         0
// exit         bye

const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

const stack = [];

readline.on('line', line => {
  const [command, value] = line.split(' ');

  if (command === 'push') {
    stack.push(+value);
    console.log('ok');
  } else if (command === 'pop') {
    if (stack.length === 0) {
      console.log('error');
    } else {
      console.log(stack.pop());
    }
  } else if (command === 'back') {
    if (stack.length === 0) {
      console.log('error');
    } else {
      console.log(stack[stack.length - 1]);
    }
  } else if (command === 'size') {
    console.log(stack.length);
  } else if (command === 'clear') {
    stack.length = 0;
    console.log('ok');
  } else if (command === 'exit') {
    console.log('bye');
    process.exit(0);
  }
});