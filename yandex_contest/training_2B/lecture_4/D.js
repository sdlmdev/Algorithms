// D. Выборы Государственной Думы

// Ограничение времени 2 секунды
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Статья 83 закона “О выборах депутатов Государственной Думы Федерального Собрания Российской Федерации”
// определяет следующий алгоритм пропорционального распределения мест в парламенте.

// Необходимо распределить 450 мест между партиями, участвовавших в выборах.
// Сначала подсчитывается сумма голосов избирателей,
// поданных за каждую партию и подсчитывается сумма голосов, поданных за все партии.
// Эта сумма делится на 450, получается величина, называемая “первое избирательное частное”
// (смысл первого избирательного частного - это количество голосов избирателей,
// которое необходимо набрать для получения одного места в парламенте).

// Далее каждая партия получает столько мест в парламенте,
// чему равна целая часть от деления числа голосов за данную партию на первое избирательное частное.

// Если после первого раунда распределения мест сумма количества мест, отданных партиям, меньше 450,
// то оставшиеся места передаются по одному партиям, в порядке убывания дробной части частного от
// деления числа голосов за данную партию на первое избирательное частное.
// Если же для двух партий эти дробные части равны, то преимущество отдается той партии,
// которая получила большее число голосов.

// Формат ввода
// На вход программе подается список партий, участвовавших в выборах.
// Каждая строка входного файла содержит название партии (строка, возможно, содержащая пробелы),
// затем, через пробел, количество голосов, полученных данной партией – число, не превосходящее 10**8.

// Формат вывода
// Программа должна вывести названия всех партий и количество голосов в парламенте,
// полученных данной партией.
// Названия необходимо выводить в том же порядке, в котором они шли во входных данных.

// Пример 1
// Ввод	                     Вывод
// Party One 100000          Party One 64
// Party Two 200000          Party Two 129
// Party Three 400000        Party Three 257

// Пример 2
// Ввод	                     Вывод
// Party number one 100      Party number one 225
// Partytwo 100              Partytwo 225

// Пример 3
// Ввод	                     Вывод
// Party number one 449      Party number one 449
// Partytwo 1                Partytwo 1

const getPlaces = (participants) => {
  const res = new Map();
  const votes = participants.reduce((acc, cur) => acc + +cur[cur.length - 1], 0) / 450;
  let totalPlaces = 0;

  participants.forEach(el => {
    const curVotes = Number(el.pop());
    const places = curVotes / votes;

    res.set(el.join(' '), places);
    totalPlaces += Math.floor(places);
  });

  if (totalPlaces < 450) {
    const sortedParticipants = Array.from(res.entries()).sort((a, b) => {
      if (b[1] % 1 !== a[1] % 1) {
        return b[1] % 1 - a[1] % 1;
      } else {
        return b[1] - a[1];
      }
    });

    for (let i = 0; i < 450 - totalPlaces; i++) {
      res.set(sortedParticipants[i][0], Math.floor(sortedParticipants[i][1]) + 1);
    }
  }

  return Array.from(res.entries()).map(([party, places]) => `${party} ${Math.floor(places)}`);
};

const fs = require('fs');
const input = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(el => el.split(' '));

fs.writeFileSync('output.txt', getPlaces(input).join('\n'));