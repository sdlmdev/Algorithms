// B. Номер левого и правого вхождения

// Ограничение времени	2 секунды
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Требуется определить в заданном массиве номер самого левого и самого правого элемента,
// равного искомому числу.

// Формат ввода
// В первой строке вводится одно натуральное число N, не превосходящее 105: количество чисел в массиве.
// Во второй строке вводятся N натуральных чисел, не превосходящих 109,
// каждое следующее не меньше предыдущего.
// В третьей строке вводится количество искомых чисел M – натуральное число, не превосходящее 106.
// В четвертой строке вводится M натуральных чисел, не превосходящих 109.

// Формат вывода
// Для каждого запроса выведите в отдельной строке через пробел два числа:
// номер элемента самого левого и самого правого элементов массива, равных числу-запросу.
// Элементы массива нумеруются с единицы.
// Если в массиве нет такого числа, выведите в соответствующей строке два нуля, разделенных пробелом.

// Пример 1
// Ввод	         Вывод
// 4             0 0
// 1 2 2 3       4 4
// 4             2 3
// 4 3 2 1       1 1

// Пример 2
// Ввод	                    Вывод
// 10                       7 8
// 1 2 3 4 5 6 7 7 8 9      3 3
// 10                       3 3
// 7 3 3 1 3 7 9 7 7 10     1 1
//                          3 3
//                          7 8
//                          10 10
//                          7 8
//                          7 8
//                          0 0

// Пример 3
// Ввод	                    Вывод
// 10                       0 0
// 1 3 3 3 3 6 8 8 9 10     9 9
// 10                       6 6
// 2 9 6 4 2 9 3 7 9 7      0 0
//                          0 0
//                          9 9
//                          2 5
//                          0 0
//                          9 9
//                          0 0

const binSearch = (l, r, dataArr, x, isLeft) => {
  let res = -1;
  while (l <= r) {
    const mid = Math.floor((l + r) / 2);

    if (dataArr[mid] === x) {
      res = mid;
      if (isLeft) {
        r = mid - 1;
      } else {
        l = mid + 1;
      }
    } else if (dataArr[mid] > x) {
      r = mid - 1;
    } else {
      l = mid + 1;
    }
  }

  return res !== -1 ? res + 1 : 0;
};

const findOccurrences = (n, m) => {
  for (let i = 0; i < m.length; i++) {
    const left = binSearch(0, n.length - 1, n, m[i], true);
    const right = binSearch(0, n.length - 1, n, m[i], false);

    console.log(`${left} ${right}`);
  }
}

const fs = require('fs');
const [[nLen], n, [mLen], m] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(
  line => line.trim().split(' ').map(Number)
);

findOccurrences(n, m);