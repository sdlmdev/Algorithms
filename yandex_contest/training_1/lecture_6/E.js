// E. Улучшение успеваемости

// Ограничение времени 1 секунда
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// В лицее на уроках информатики ответы учеников оцениваются целым числом баллов от 2 до 5 .
// Итоговая оценка по информатике выставляется как среднее арифметическое оценок на всех уроках,
// округленное до ближайшего целого числа.
// Если среднее значение находится ровно посередине между двумя целыми числами,
// то оценка округляется вверх.

// Все ученики лицея стремятся получить итоговую оценку по информатике не ниже 4 баллов.
// К сожалению, один из учеников получил на уроках a двоек, b троек и c четверок.
// Теперь он планирует получить несколько пятерок, причем хочет,
// чтобы итоговая оценка была не меньше 4 баллов.
// Ему надо понять, какое минимальное количество пятерок ему необходимо получить,
// чтобы добиться своей цели.

// Требуется написать программу, которая по заданным целым неотрицательные числам a, b и c
// определяет минимальное количество пятерок, которое необходимо получить ученику,
// чтобы его итоговая оценка по информатике была не меньше 4 баллов.

// Формат ввода
// Входные данные содержат три строки.
// Первая строка содержит целое неотрицательное число a,
// вторая строка содержит целое неотрицательное число b,
// третья строка содержит целое неотрицательное число c (0 ≤ a, b, c ≤ 10**15, a + b + c ≥ 1).

// Формат вывода
// Выходные данные должны содержать одно число: минимальное число пятерок,
// которое необходимо получить ученику, чтобы итоговая оценка была не меньше 4 баллов.

// Пример
// Ввод   	Вывод
// 2        2
// 0
// 0

const floorDiv = (a, b) => (a - a % b) / b;

const checkFives = (fives, params) => {
  const [a, b, c] = params;
  const sum = a + b + c + fives;

  return ((fives * 5n) + (a * 2n) + (b * 3n) + (c * 4n)) * 2n  >= sum * 7n;
};

const binarySearch = (l, r, check, params) => {
  while (l < r) {
    const m = floorDiv(l + r, 2n);

    if (check(m, params)) {
      r = m;
    } else {
      l = m + 1n;
    }
  }

  return l;
};

const fs = require('fs');
const [a, b, c] = fs.readFileSync('input.txt', 'utf-8').trim().split('\n').map(BigInt);

fs.writeFileSync('output.txt', binarySearch(0n, a + b + c, checkFives, [a, b, c]).toString());
