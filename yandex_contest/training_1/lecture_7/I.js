// I. Автобусы

// Ограничение времени 2 секунды
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод стандартный вывод или output.txt

// Новый Президент Тридевятой республики начал свою деятельность с полной ревизии
// системы общественного транспорта страны.
// В результате на основе социологических опросов населения было составлено идеальное ежедневное
// расписание движения междугородних автобусов, утвержденное Парламентом республики.

// Более того, было решено заменить весь автобусный парк одинаковыми новыми,
// очень дорогими, но гораздо более надежными, красивыми и удобными машинами.

// Автобусная сеть страны охватывает N городов, занумерованных целыми числами от 1 до N.

// Идеальное расписание содержит M ежедневных рейсов, i-й рейс начинается в городе Fi в момент времени Xi
// и заканчивается в некотором другом городе Gi в момент времени Yi.
// Продолжительность каждого рейса ненулевая и строго меньше 24 часов.
// Рейс i выполняется одним из автобусов, находящихся в момент времени Xi в городе Fi.

// Новые автобусы не требуют ремонта и могут работать круглосуточно, поэтому автобус,
// прибывший в некоторый момент времени в некоторый город,
// всегда готов в тот же самый момент времени или позже отправиться в путь для обслуживания любого
// другого рейса из данного города. Автобус может выехать из города,
// только выполняя какой-либо рейс из расписания.

// Предполагается, что расписание будет действовать неограниченное время, поэтому может оказаться так,
// что его невозможно обслужить никаким конечным числом автобусов.

// Определите наименьшее количество новых автобусов, достаточное для обеспечения
// движения по расписанию в течение неограниченного периода времени.

// Формат ввода
// В первой строке задаются целые числа N и М (1 ≤ N, M ≤ 100 000) — количество городов и рейсов
// автобусов соответственно.

// В каждой из следующих M строк содержится описание рейса автобуса: номер города отправления Fi,
// время отправления Xi, номер города назначения Gi (Fi ≠ Gi), время прибытия Yi,
// отделенные друг от друга одним пробелом. Время прибытия и отправления задается в формате HH:MM,
// где HH — часы от 00 до 23, MM — минуты от 00 до 59.

// Формат вывода
// Выведите одно число — минимально необходимое количество автобусов.
// Если расписание невозможно обслуживать в течение неограниченного периода времени конечным
// числом автобусов, выведите число -1.

// Пример 1
// Ввод	                   Вывод
// 2 2                     3
// 2 20:00 1 10:00
// 1 08:00 2 21:00

// Пример 2
// Ввод	                   Вывод
// 2 2                     1
// 1 09:00 2 20:00
// 2 20:00 1 09:00

// Пример 3
// Ввод	                   Вывод
// 3 4                     2
// 3 03:52 1 08:50
// 1 18:28 3 21:53
// 2 03:58 3 09:00
// 3 14:59 2 21:13

const getMinutes = (str) => {
  const time = str.split(':').map(Number);

  return time[0] * 60 + time[1];
};

const checkErr = (cities) => {
  for (let city of cities) {
    if (city !== 0) return true;
  }
};

const cntBuses = [];
const balance = [];
let events = [];
let midnight = 0;
let N, M;

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

rl.on('line', (line) => {
  const data = line.trim().split(' ');

  if (!N && !M) {
    [N, M] = data.map(Number);

    for (let i = 0; i < N; i++) {
      cntBuses.push(0);
      balance.push(0);
    }
  } else {
    const [fCity, fTime, tCity, tTime] = data;
    const fMinutes = getMinutes(fTime);
    const tMinutes = getMinutes(tTime);

    if (fMinutes > tMinutes) midnight += 1;

    balance[+fCity - 1] -= 1;
    balance[+tCity - 1] += 1;

    events.push([fMinutes, 1, +fCity - 1]);
    events.push([tMinutes, -1, +tCity - 1]);
  }
});

rl.on('close', () => {
  if (checkErr(balance)) {
    console.log(-1);
    return;
  }

  events.sort((a, b) => a[0] - b[0] || a[1] - b[1]);

  for (let event of events) {
    if (event[1] == -1) cntBuses[event[2]] += 1;
    else if (cntBuses[event[2]] > 0) cntBuses[event[2]] -= 1;
  }

  console.log(cntBuses.reduce((acc, cur) => acc + cur, 0) + midnight);
});