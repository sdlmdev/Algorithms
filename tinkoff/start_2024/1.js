// 1 задание
// Ограничение времени
// 1 секунда
// Ограничение памяти
// 64 МБ

// Олег — настоящий герой, чьи школьные будни наполнены заботами, уроками и оценками. Он изо всех сил старается, но, как и любой человек, он время от времени допускает ошибки и получает не самые лучшие оценки.

// Сегодня Олег стоит перед особенным испытанием — ему предстоит показать своим родителям свои оценки. Родители попросили показать ему все его оценки за какие-то последовательные 7 дней. Оценки представляют собой последовательность целых чисел от 2 до 5 включительно — по одной оценке на каждый день. Олег хочет выбрать такой непрерывный отрезок своих оценок, чтобы в этом отрезке не было оценок 2 и 3, а количество оценок 5 было максимальным.

// Помогите Олегу найти этот особенный момент, когда его школьный свет преобладает над тьмой, и его оценки сияют наиболее ярко! 

// Формат входных данных
// Первая строка содержит одно натуральное число n — количество оценок (1≤n≤10**5). Вторая строка содержит n целых чисел — по оценке m за каждый день (2≤m≤5).

// Формат выходных данных
// Выведите количество пятерок в выбранном Олегом отрезке, удовлетворяющем всем условиям. Если такого отрезка не существует, выведите −1.

// Примеры данных
// Пример 1
// Ввод
// 9
// 5 5 4 5 4 5 4 5 4
// Вывод
// 4

// Пример 2
// Ввод
// 8
// 3 4 4 4 4 5 4 5
// Вывод
// 2

// Пример 3
// Ввод
// 10
// 5 5 5 5 5 3 5 5 5 5
// Вывод
// -1

const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout,
});

let lineCnt = 0;
let n;

readline.on('line', line => {
  if (lineCnt === 0) {
    n = Number(line);
  } else {
    readline.close();
    const nums = line.trim().split(' ').map(Number);
    const map = new Map([
      [2, 0],
      [3, 0],
      [4, 0],
      [5, 0],
    ]);
    let res = -1;
    const curN = n > 7 ? 7 : n;

    for (let i = 0; i < curN; i += 1) {
      map.set(nums[i], map.get(nums[i]) + 1);
    }

    if (map.get(2) === 0 && map.get(3) === 0) {
      res = Math.max(res, map.get(5));
    }

    if (n <= 7) {
      console.log(res);
      return;
    } else {
      for (let i = 7; i < n; i += 1) {
        map.set(nums[i], map.get(nums[i]) + 1);
        map.set(nums[i - 7], map.get(nums[i - 7]) - 1);

        const curTwo = map.get(2);
        const curThree = map.get(3);

        if (curTwo === 0 && curThree === 0) {
          res = Math.max(res, map.get(5));
        }
      }

      console.log(res);
    }
  }

  lineCnt += 1;
});